@page "/authors/edit/{Id}"
@attribute  [Authorize(Roles ="Administrator")]
@inject NavigationManager _navManager
@inject IAuthorRepository _authRepo

<h3 class="card-title">Edit Author</h3>
@if (isFailed)
{
   <ErrorMessage Message="Something went wrong with the operation" />
}

@if (Model == null)
{
    <LoadingMessage Message="Loading Author for Edit" />
}
else
{
    <EditForm Model="Model" OnValidSubmit="EditAuthor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label for="firstname">First Name</label>
            <InputText @bind-Value="Model.Firstname" class="form-control" id="firstname" />
        </div>
        <div class="form-group">
            <label for="lastname">Last Name</label>
            <InputText @bind-Value="Model.Lastname" id="lastname" />
        </div>
        <div class="form-group">
            <label for="bio">Biography</label>
            <InputTextArea @bind-Value="Model.Bio" id="bio" />
        </div>
        <button class="btn btn-primary" type="submit">Submit Changes</button>
        <button @onclick="BackToList" class="btn btn-outline-primary"><span class="oi oi-media-skip-backward"></span> Back To List</button>

    </EditForm>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    private bool isFailed = false;

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);

        Model = await _authRepo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private async Task EditAuthor()
    {
        bool isSuccess = await _authRepo.Update(Endpoints.AuthorsEndpoint, Model,Model.Id);
        if (isSuccess)
        {
            BackToList();
        }
        else
        {
            isFailed = true;
        }
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }
}
