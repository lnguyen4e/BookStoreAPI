@page "/Register"
@using BookStore_UI.Models
@using BookStore_UI.Contracts
@inject NavigationManager _navMan
@inject IAuthenticationRepository _authRepo

    <div class="card">
        <h3 class="card-title">Register Now</h3>
        @if (isFailed)
        {
           <ErrorMessage Message="Something went wrong with this operation"/>
        }
        
            <EditForm Model="Model" OnValidSubmit="HandleRegistration">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText Id="email" class="form-control" @bind-Value="Model.EmailAddress" />
                    <ValidationMessage For="@(() => Model.EmailAddress)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" class="form-control" @bind-Value="Model.Password" />
                    <ValidationMessage For="@(() => Model.Password)" />
                </div>
                <div class="form-group">
                    <label for="confirmpassword">Confirm Password</label>
                    <InputText Id="confirmpassword" type="password" class="form-control" @bind-Value="Model.ConfirmPassword" />
                    <ValidationMessage For="@(() => Model.ConfirmPassword)" />
                </div>
                <button class="btn btn-primary btn-block">Submit</button>
            </EditForm>
        </div>
   


@code {
    private RegistrationModel Model = new RegistrationModel();
    bool isFailed = false;
    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(Model);
        if (response)
        {
            _navMan.NavigateTo("/login");
        }
        else
        {
            isFailed = true;
        }
    }
}
